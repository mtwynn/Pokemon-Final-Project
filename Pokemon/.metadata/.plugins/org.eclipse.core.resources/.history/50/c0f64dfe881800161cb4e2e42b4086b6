package dev.mtwynn.pokemon;

import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

import dev.mtwynn.pokemon.display.Display;
import dev.mtwynn.pokemon.gfx.Assets;
import dev.mtwynn.pokemon.gfx.ImageLoader;
import dev.mtwynn.pokemon.gfx.SpriteSheet;

//holds all elements of game play, starting, running, and closing
public class Game implements Runnable { 
	
	private Display display;
	public int width, height;
	public String title;
	
	private boolean running = false;
	private Thread thread;
	
	private BufferStrategy bs;
	private Graphics g;
	
	private BufferedImage testImage;
	private BufferedImage testMap;
	private SpriteSheet sheet;
	
	public Game(String title, int width, int height) { 
		this.width = width;
		this.height = height;
		this.title = title;
	}
	
	//initializes game elements
	private void init() {
		display = new Display(title, width, height);
		testMap = ImageLoader.loadImage("/maps/Map1.png");
		Assets.init();
	}
	
	int x = 0;
	
	//updates the state of the game
	private void tick() {
		x += 1;
	}
	//draws game according to the current variables 
	private void render() {
	    bs = display.getCanvas().getBufferStrategy();
	    if(bs == null) {
	    	display.getCanvas().createBufferStrategy(3);
	    	return;
	    }
	    g = bs.getDrawGraphics();
	    //Clear Screen
	    g.clearRect(0, 0, width,  height);
	    //Draw
	    g.drawImage(testMap, 0, 0, null); // draws map
	    g.drawImage(Assets.player1, x, 10, null);
	    //End Draw
	    bs.show();
	    g.dispose();
	}
	
	//runs the game 
	public void run() { 
		
	    init();
	    
	    int fps = 60;
	    double timePerTick = 1000000000 / fps;
	    double delta = 0;
	    long now;
	    long lastTime = System.nanoTime();
	    
	    while(running) { //while true, continues updating variables and rendering graphics
	    	now = System.nanoTime();
	    	delta += (now - lastTime) / timePerTick;
	    	lastTime = now;
	    	
	    	if(delta >= 1) {
	    		tick();
	    		render();
	    		delta--;
	    }
	    stop();
	}
	
	//starts the game
	public synchronized void start() {
		if(running)//fail safe, in case instance of game already running
		    return;
		running = true;
		thread = new Thread(this);//passes game class into a thread 
		thread.start();
	}
	
	//stops the game
	public synchronized void stop() {
		if(!running)//fail safe 
		    return;
		running = false;
		try {
			thread.join();//safely closes the game
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}
